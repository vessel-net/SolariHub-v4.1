# Multi-stage build for Nx monorepo backend
FROM node:20-alpine AS base
WORKDIR /app

# Install npm packages with timeout optimizations
RUN npm config set registry https://registry.npmjs.org/ && \
    npm config set fetch-retries 3 && \
    npm config set fetch-retry-factor 2 && \
    npm config set fetch-timeout 60000 && \
    npm config set fetch-retry-mintimeout 10000 && \
    npm config set fetch-retry-maxtimeout 60000

# Copy package files first for better caching
COPY package*.json ./
COPY nx.json ./
COPY tsconfig.base.json ./

# Clean npm cache and install dependencies with fallback strategy
RUN npm cache clean --force && \
    (npm install --no-fund --no-audit --omit=optional || \
    (echo "First install failed, retrying with longer timeout..." && npm config set fetch-timeout 120000 && npm install --no-fund --no-audit --omit=optional) || \
    (echo "Second install failed, trying with legacy peer deps..." && npm install --no-fund --no-audit --omit=optional --legacy-peer-deps))

# Copy source code after dependencies are installed
COPY . .

# Build the backend with Nx
RUN npx nx build backend --prod

# Production stage
FROM node:20-alpine AS production
WORKDIR /app

# Install only essential production dependencies with shorter timeout
RUN npm config set fetch-timeout 30000 && \
    npm install express cors helmet morgan compression dotenv bcryptjs jsonwebtoken mongoose multer nodemailer --no-fund --no-audit --omit=dev

# Copy built application
COPY --from=base /app/dist/apps/backend/ ./

# Expose port
EXPOSE 4000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:4000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Start the application
CMD ["node", "main.js"] 