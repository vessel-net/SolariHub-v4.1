# Multi-stage build for Nx monorepo frontend
FROM node:20-alpine AS base
WORKDIR /app

# Install npm packages with optimizations
RUN npm config set registry https://registry.npmjs.org/ && \
    npm config set fetch-retries 3 && \
    npm config set fetch-retry-factor 2 && \
    npm config set fetch-timeout 60000

# Copy package files first for better caching
COPY package*.json ./
COPY nx.json ./
COPY tsconfig.base.json ./

# Install dependencies with fallback strategy (avoiding npm ci hanging)
RUN npm cache clean --force && \
    (npm install --no-fund --no-audit --omit=optional || \
    (echo "First install failed, retrying with longer timeout..." && npm config set fetch-timeout 120000 && npm install --no-fund --no-audit --omit=optional) || \
    (echo "Second install failed, trying with legacy peer deps..." && npm install --no-fund --no-audit --omit=optional --legacy-peer-deps))

# Copy source code
COPY . .

# Build the frontend with Nx
RUN npx nx build frontend --prod

# Production stage
FROM node:20-alpine AS production
WORKDIR /app

# Install serve for static file serving
RUN npm install -g serve

# Copy built application
COPY --from=base /app/dist/apps/frontend/ ./build/

# Create a simple server configuration
RUN echo '{"rewrites": [{"source": "/**", "destination": "/index.html"}]}' > serve.json

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3000/ || exit 1

# Start the application
CMD ["serve", "-s", "build", "-p", "3000", "--config", "serve.json"] 